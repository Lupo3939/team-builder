
// TeamCompDesigner.cpp : Defines the entry point for the console application.
//

#include <string>
#include <vector>
#include <unordered_map>
#include <iostream>
using namespace std;

vector<string> Champions = {"Aatrox", "Ahri", "Akali", "Alistar", "Amumu", "Anivia", "Annie", "Ashe", "Aurelion Sol", "Azir", "Bard", "Blitzcrank", "Brand", "Braum", "Caitlyn", "Camille", "Cassiopeia", "Cho'Gath", "Corki", "Darius", "Diana", "Dr. Mundo",
		"Draven", "Ekko", "Elise", "Evelynn", "Ezreal", "Fiddlesticks", "Fiora", "Fizz", "Galio", "Gangplank", "Garen", "Gnar", "Gragas", "Graves", "Hecarim", "Heimerdinger", "Illaoi", "Irelia", "Ivern", "Janna", "Jarvan IV", "Jax", "Jayce", 
		"Jhin", "Jinx", "Kalista", "Karma", "Karthus", "Kassadin", "Katarina", "Kayle", "Kayn", "Kennen", "Kha'Zix", "Kindred", "Kled", "Kog'Maw", "Leblanc", "Lee Sin", "Leona", "Lissandra", "Lucian", "Lulu", "Lux", "Malphite", "Malzahar", "Maokai", 
		"Master Yi", "Miss Fortune", "Mordekaiser", "Morgana", "Nami", "Nasus", "Nautilus", "Nidalee", "Nocturne", "Nunu", "Olaf", "Orianna", "Pantheon", "Poppy", "Quinn", "Rakan", "Rammus", "Rek'Sai", "Renekton", "Rengar", "Riven", "Rumble",
		"Ryze", "Sejuani", "Shaco", "Shen", "Shyvana", "Singed", "Sion", "Sivir", "Skarner", "Sona", "Soraka", "Swain", "Syndra", "Tahm Kench", "Taliyah", "Talon", "Taric","Teemo", "Thresh", "Tristana", "Trundle", "Tryndamere", "Twisted Fate", "Twitch",
		"Udyr", "Urgot", "Varus", "Vayne", "Veigar", "Vel'Koz", "Vi", "Viktor", "Vladimir", "Volibear", "Warwick", "Wukong", "Xayah", "Xerath", "Xin Zhao", "Yasuo", "Yorick", "Zac", "Zed", "Ziggs", "Zilean", "Zyra"};

		//^Pool of Current Champions in League of Legends

struct Champion {
	string name;
	int tank;
	int range;
	int cc;
	int mobility;
	int damage;
	int heal;
	int shield;
};


vector<Champion> Champs;

struct Player { //Pool of Players
	string name;
	vector<string> pool;
};

void selectTank(){};
void selectADC(){};
void selectMid(){};
void selectJG(){};
void selectSupp(){};


vector<Player> Players; //In reality this is a small scope program. Vector should suffice. If used for large scale, change to a hashmap

Player newPlayer(string name)
{
	Player *temp = new Player; //New temp Player
	string champ;
	temp->name = name; //Add the player's name
	cout << "Please enter each champion in " << name << "'s pool, press enter between each. When you're done, type in quit" << endl;
	do
	{
		cin >> champ;
		temp->pool.push_back(champ);
		cout << "Please enter a valid Champion/correct the incorrect name" << endl;
		cout << "You entered: " << champ << endl;
	} while (champ != "quit"); //Quit phrase is quit

	return *temp;
};

void store()
{
	string name;
	cout << "Please enter the Player's name" << endl;
	cin >> name;
	Players.push_back(newPlayer(name));
	cout << "Player has been stored successfully" << endl;
};

void load()
{
	cout << "Player has been found" << endl;
};

void teamBuilder()
{
	cout << "Based on your champion pools, this is the best general composition for your selection: " << endl;
};

int main()
{
	//Menu
	//M-1: Store Player Data
	//M-2: Find Player Data
	//M-3: Create Team
		//Load Players into their roles
		//Determine what kind of comp; Tanky, CC-Heavy, Balanced, Protect the ADC
		//Select Champions depending on certain value requirements for the team
	//M-4: Quit
  
	int input;
	do
	{
		cout << "What would you like to do?" << endl;
		cout << "To store player data and champion pools, enter 1" << endl;
		cout << "To load player data and champion pools, enter 2" << endl;
		cout << "To create a team, enter 3" << endl;
		cout << "To exit, enter 4" << endl;
		
		cin >> input;
		
		if (input == 1)
			store();
		if (input == 2)
			load();
		if (input == 3)
			teamBuilder();
		if (input == 4)
			break;

	} while (input > 0);


	cout << "Goodbye" << endl;



    return 0;
}



